<?php
/**
 * @file
 * Code for the ckan_api module.
 */
include_once 'ckan_api/ckan_api.inc';

/**
 * Implements hook_menu().
 */
function ict_ckan_api_menu() {
  // Configure ckan instance. Includes: API-key, ...
  $items['admin/config/content/ckan-api-settings'] = array(
    'title' => 'CKAN settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ckan_conf_form'),
    'access callback' => 'user_access',
    'access arguments' => array('ckan set config'),
    'file' => 'ict_ckan_api.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function ict_ckan_api_permission() {
  $permission = array(
    'ckan set config' => array(
      'title' => t('Set and change CKAN instance settings')
    ),
  );

  return $permission;
}

function ict_ckan_api_get_workflow_data() {
  // get embargo period time
  $query_limit = variable_get('ict_limit_query', false); // admin page settings
  $day = 60 * 60 * 24;
  $embargo_period = variable_get('embargo_period', 7);
  $period = $day * $embargo_period;
  $current_date = time();
  $substructed_date = $current_date - $period;
  $updates = array();

  $query = db_select('project_workflow', 'w');
  $query->leftJoin('node', 'n', "n.nid = w.nid");
  $query->leftJoin('field_data_field_update_published', 'up', "up.entity_id = w.nid");
  $query->fields('w', array('nid', 'created'));
  $query->condition('w.state', 'approved');
  $query->condition('w.created', $substructed_date, '<=');
  $query->condition('n.type', 'update');
  $query->where("((up.field_update_published_value IS NULL) OR (up.field_update_published_value = 0))");
  $query->orderBy('w.created', 'ASC');
  $query_limit && $query->range(0, $query_limit);
  $res = $query->execute()->fetchAll();

  //var_dump($res); die;
  return $res;
}

/**
 * Implements hook_cron().
 */

function ict_ckan_api_cron() {
  $result = ict_ckan_api_get_workflow_data();
  $queue = DrupalQueue::get('send_updates');

  foreach ($result as $update) {
    $queue->createItem($update);
  }
}
 
/*
 * Implements hook_cron_queue_info().
 */
function ict_ckan_api_cron_queue_info() {
  $queues['send_updates'] = array(
    'worker callback' => 'ckan_send_updates',
    'time' => variable_get('ict_ckan_time', 300), //admin page settings
  );
  return $queues;
}

function ckan_send_updates($data) {

  global $base_url;
  
  // Get update data
  $update = isset($data->nid) ? node_load($data->nid) : FALSE;
  $partners = array();

  if ($update && $update->type == 'update' && ((empty($update->field_update_published) || isset($update->field_update_published['und'][0]['value'])) && empty($update->field_update_published['und'][0]['value']))) {

    $project_id = $update->field_project['und'][0]['target_id'];
    $project = node_load($project_id);

    // Check for Project entity to be an Object (secure from broken updates)
    if ($project) {
      // Generating Budget total
      $node_project_wrapper = entity_metadata_wrapper('node', $project);
      $budget_values = $node_project_wrapper->field_original_total_budget->value();
      $budget_total = _prepare_budget($budget_values);

      // Government entity and Portfolio
      $project_term_gov_entity = taxonomy_term_load($project->field_government_entity_name['und'][0]['tid']);
      $project_term_portfolio = taxonomy_term_load($project->field_portfolio_name['und'][0]['tid']);
      
      // Approve and Completion dates
      $approved_start_date = format_date(strtotime($project->field_start_date['und'][0]['value']), 'medium', 'j F Y');
      $approved_completion_date = format_date(strtotime($project->field_original_completion_date['und'][0]['value']), 'medium', 'j F Y');

      // Expected financial benefits
      $expected_fin_benefits = "$" . number_format($project->field_predicted_project_benefit['und'][0]['value'], 2, '.', ' ') . "m";

      /***** 
        Get Data from Update 
      *****/

      // Generating partners list
      if (isset($update->field_implementation_partners['und']) && !empty($update->field_implementation_partners['und'])) {
        $get_partners = _ict_update_generate_default_multiple_select_terms_array($update->field_implementation_partners['und']);
      }
      // else if (isset($project->field_implementation_partners['und']) && !empty($project->field_implementation_partners['und'])) {
      //   $get_partners = _ict_update_generate_default_multiple_select_terms_array($project->field_implementation_partners['und']);
      // }
      else {
        $get_partners = array();
      }

      // Check for empty partners
      if (!empty($get_partners)) {
        foreach ($get_partners as $partner) {
          $pterm = taxonomy_term_load($partner);
          array_push($partners, $pterm->name);
        }
      }

      // Generating Budget spent total
      $node_update_wrapper = entity_metadata_wrapper('node', $update);
      $budget_spent = $node_update_wrapper->field_original_total_budget->value();
      $budget_total_spent = _prepare_budget($budget_spent);
      
      // Generate Update approved date
      $get_approved_date = date('d/m/Y', $data->created);
      
      // Actual level of completion
      $level_of_project_co = $update->field_actual_level_of_project_co['und'][0]['value'] . '%';
      
      // Forecast level of completion
      $forecast_level_of_project_co = $update->field_forecast_level_of_project_['und'][0]['value'] . '%';

      // Project stage
      $project_stage = taxonomy_term_load($update->field_project_stage['und'][0]['tid']);

      // Expected Completion Date
      $expected_co_date = format_date(strtotime($update->field_expected_completion_date['und'][0]['value']), 'medium', 'j F Y');

      // Current expected financial benefits
      $curr_expected_fin_benefits = "$" . number_format($update->field_current_financial_benefits['und'][0]['value'], 2, '.', ' ') . "m";

      // Value of financial benefits realised to date
      $value_of_fin_benefits = "$" . number_format($update->field_estimated_value_of_benefit['und'][0]['value'], 2, '.', ' ') . "m";

      // Benefits realised
      $benefits_realised = _get_realised_benefits($update);

      // Entity comments
      $entity_comments = $update->field_entity_comments['und'][0]['value'];

      // Gather all of the data into one array
      $prepare_data[] = array(
        "Project Title" => $project->title,
        "Government Entity Name" => $project_term_gov_entity->name,
        "Portfolio Name" => $project_term_portfolio->name,
        "Government Implementation Partner/s" => $partners,
        "Program Name" => $project->field_program_name['und'][0]['safe_value'],
        "Project Summary and Objectives" => strip_tags($project->field_brief_project_summary['und'][0]['safe_value']),
        "Total Expenditure To Date" => isset($budget_total_spent['total']) ? $budget_total_spent['total'] : '$0.00m',
        "Original Total Project Budget" => isset($budget_total['total']) ? $budget_total['total'] : '$0.00m',
        "Project Budget" => isset($budget_total['splited']) ? $budget_total['splited'] : array(),
        "Project Budget Spent" => isset($budget_total_spent['splited']) ? $budget_total_spent['splited'] : array(),
        "Actual Level of Project Completion" => $level_of_project_co,
        "Forecast Level of Project Completion" => $forecast_level_of_project_co,
        "Project Stage" => $project_stage->name,
        "Original Approved Start Date" => $approved_start_date,
        "Original Approved Completion Date" => $approved_completion_date,
        "Expected Completion Date" => $expected_co_date,
        "Expected Financial Benefits" => $expected_fin_benefits,
        "Current Expected Financial Benefits" => $curr_expected_fin_benefits,
        "Value of Financial Benefits Realised To Date" => $value_of_fin_benefits,
        "Benefits realised" => $benefits_realised,
        "Entity comments" => strip_tags($entity_comments),
        "Updated" => $get_approved_date
      );

      // Resource creation for the first time
      $project_resource = field_get_items('node', $project, 'field_resource_id');
      if (!$project_resource) {
        // for PHP 5.4+
        // $json_data = json_encode($prepare_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
        
        // for PHP 5.3 -
        $json_data = json_encode($prepare_data);

        // Generate tmp file
        $tmp_path = file_directory_temp();
        $tmp_file = tempnam(DRUPAL_ROOT . '/' . $tmp_path, '');

        $handle = fopen($tmp_file, "w");
        
        fwrite($handle, $json_data);
        fclose($handle);

        $project_path = $base_url . "/" . drupal_get_path_alias('node/' . $project->nid);
        $resource_create = CkanApi::getInstance()->action('resource_create', array(
          'data' => array(
            'package_id' => variable_get('dataset_id'),
            'url' => 'data.json',
            // Set Enters for markdown coversion
            'description' => trim(strip_tags($project->field_brief_project_summary['und'][0]['safe_value'])) . "

            View more info at " . $project_path,
            'name' => $project->title,
            'format' => 'json',
            'url_type' => 'upload',
            // for php 5.5 +
            // 'upload' => new CurlFile(realpath($tmp_file), 'application/json', 'data.json')
            // for old PHP versions
            'upload' => '@' . realpath($tmp_file)
          )
        ));

        // remove tmp file after data is sent to CKAN
        unlink($tmp_file);

        if (!empty($resource_create) && isset($resource_create->id)) {

          // Set resource id into Project field
          $project->field_resource_id['und'][0]['value'] = $resource_create->id;
          node_save($project);

          // Mark Update as published
          $update->field_update_published['und'][0]['value'] = 1;
          node_save($update);
        }

        watchdog('resource_created', t("Resource was created with this id: " . $resource_create->id . " in this dataset id: " . $resource_create->package_id));
      }

      // Recource update
      else if ($project_resource) {
        
        // GET resource file data
        $resource_json_data = CkanApi::getInstance()->action('resource_get_json_file', array(
          'url' => variable_get('ckan_url') . "/dataset/" . variable_get('dataset_id') . "/resource/" . $project->field_resource_id['und'][0]['value'] . "/download/data.json"
          )
        );

        array_push($resource_json_data, $prepare_data[0]);

        // for PHP 5.4+
        // $json_data = json_encode($resource_json_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
        
        // for PHP 5.3 -
        $json_data = json_encode($resource_json_data);
        
        // Generate tmp file
        $tmp_path = file_directory_temp();
        $tmp_file = tempnam(DRUPAL_ROOT . '/' . $tmp_path, '');

        $handle = fopen($tmp_file, "w");
        fwrite($handle, $json_data);
        fclose($handle);

        // Resource update data
        $resource_update = CkanApi::getInstance()->action('resource_update', array(
          'data' => array(
              'id' => $project->field_resource_id['und'][0]['value'],
              'url_type' => 'upload',
              'format' => 'json',
              //for PHP 5.5+
              // 'upload' => new CurlFile(realpath($tmp_file), 'application/json', 'data.json')
              // for old PHP versions
              'upload' => '@' . realpath($tmp_file)
          )
        ));

        // remove tmp file after data is sent to CKAN
        unlink($tmp_file);

        // Mark the update as published on ckan
        if (!empty($resource_update) && isset($resource_update->id)) {
          $update->field_update_published['und'][0]['value'] = 1;
          node_save($update);

          watchdog('resource_updated', t("Resource with this id: " . $resource_update->id . " was updated."));
        }
      }
    }
  }
}

function _prepare_budget($data) {
  $budgets = array();
  if ($data) {
    $budgets['total'] = 0;
    
    foreach ($data as $key => $value) {
      
      if (!is_numeric($key)) continue;
      
      $budgets['splited'][$value->field_year['und'][0]['safe_value']] = isset($value->field_total['und']) ? "$" . number_format($value->field_total['und'][0]['value'], 2, '.', ' ') . "m" : '-';

      $budgets['total'] += isset($value->field_total['und']) ? $value->field_total['und'][0]['value'] : 0;
    }
    $budgets['total'] = "$" . number_format($budgets['total'], 2, '.', ' ') . "m";

  }

  return $budgets;
}

function _get_realised_benefits($update) {
  $update = entity_metadata_wrapper('node', $update);
  $benefits = $update->field_benefits_realised->value();
  $prepared_benefits = array();

  foreach($benefits as $key => $val) {
    if ((!empty($val->field_removed['und'][0]['value']) && $val->field_removed['und'][0]['value']) ||
      $val->field_status['und'][0]['value'] == 'removed') {
      unset($benefits[$key]);
    }
    else {
      $collection_wrapper = entity_metadata_wrapper('field_collection_item', $val);
      $benefit_commentary = $collection_wrapper->field_commentary->value() ? $collection_wrapper->field_commentary->value() : '';
      $prepared_benefits[] = array(
        "Benefit title" => $collection_wrapper->field_benefit->value(),
        "Start date" => format_date(strtotime($val->field_benefit_start_date['und'][0]['value']), 'medium', 'j F Y'),
        "End date" => format_date(strtotime($val->field_end_date['und'][0]['value']), 'medium', 'j F Y'),
        "Benefit commentary" => $benefit_commentary,
        "Benefit status" => $collection_wrapper->field_status->label()
      );
    }
  }

  return $prepared_benefits;
}

