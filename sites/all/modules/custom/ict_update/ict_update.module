<?php
/**
 * @file
 * Code for the ICT Update feature.
 */

include_once 'ict_update.features.inc';
/**
 * @file
 * Code for the ICT Project feature.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function ict_update_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && in_array($plugin_type, array('content_types', 'access'))) {
    return 'plugins/' . $plugin_type;
  }
}

function ict_update_update_form_recursive($key, $value, $array) {
  $array[$key] = $value;
  foreach(element_children($array) as $k) {
    $array[$k] = ict_update_update_form_recursive($key, $value, $array[$k]);
  }
  return $array;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ict_update_form_update_node_form_alter(&$form, &$form_state, $form_id) {
  $update = $form['#node'];
  if (empty($update->nid)) {
    $project_id = arg(1);
    $project = node_load($project_id);
    $approved_vid = ict_project_get_last_transaction_by_state($project_id, 'approved');
    if (!$approved_vid->vid) {
      drupal_not_found();
    }
    $form['title']['#value'] = $project->title . ' Update submission ' . format_date(REQUEST_TIME, 'medium', 'd/m/Y h:i');
    $form['field_project'][LANGUAGE_NONE][0]['target_id']['#value'] = $project->title . ' (' . $project_id . ')';
    $form['field_project_revision'][LANGUAGE_NONE][0]['value']['#value'] = $approved_vid->vid;
  }

  $form['#theme'] = 'ict_update_add_form';

  $form = ict_update_update_form_recursive('#title_display', 'invisible', $form);

  $form['field_expected_completion_date']['und'][0]['#prefix'] = '<div class="element-hidden">';
  $form['field_expected_completion_date']['und'][0]['#suffix'] = '</div>';
  $form['field_expected_completion_date']['date']['#type'] = 'textfield';
  $form['field_expected_completion_date']['und'][0]['#theme_wrappers'] = array();
  $form['field_expected_completion_date']['date']['#default_value'] = $form['field_expected_completion_date']['und'][0]['#default_value'];
  $form['field_expected_completion_date']['date']['#attributes'] = array(
    'class' => array('add_datepicker'),
    'data-dateFormat' => 'dd/mm/yy',
  );
  $form['field_expected_completion_date']['radio'] = array(
    '#type' => 'radios',
    '#options' => array(
      'time' => '',
      'na' => 'N/A',
    ),
    '#default_value' => 'time',
    '#weight' => -999,
  );
  $form['field_expected_completion_date']['#element_validate'] = array('ict_update_datepicker_value');

  foreach(element_children($form['field_benefits_realised']['und']) as $benefit_key) {
    if (!is_numeric($benefit_key)) continue;
    $form['field_benefits_realised']['und'][$benefit_key]['field_benefit_start_date']['und'][0]['#theme_wrappers'] = array();
    $form['field_benefits_realised']['und'][$benefit_key]['field_end_date']['und'][0]['#theme_wrappers'] = array();
  }

  $form['field_benefits_realised']['und']['#theme'] = 'field_benefits_realised_table';

  $action = arg(2);
  if ($action == 'approve') {
    $form['actions']['submit']['#attributes']['class'] = array('submit-button');
    $form['actions']['submit_approve'] = $form['actions']['submit_decline'] = $form['actions']['submit'];
    unset($form['actions']['submit']);
    $form['actions']['submit_decline']['#value'] = t('Decline');
    $form['actions']['submit_approve']['#value'] = t('Approve');
    $form['actions']['submit_decline']['#submit'][] = 'ict_update_workflow_set_draft';
    $form['actions']['submit_approve']['#submit'][] = 'ict_update_workflow_set_approve';
  }
  else {
    $form['actions']['submit']['#attributes']['class'] = array('submit-button');
    $form['actions']['submit_request'] = $form['actions']['submit'];
    $form['actions']['submit_request']['#value'] = t('Save and request approval');
    $form['actions']['submit_request']['#validate'][] = 'ict_update_all_fields_required_validate';
    $form['actions']['submit_request']['#submit'][] = 'ict_update_workflow_set_wait_approve';
    $form['actions']['submit']['#submit'][] = 'ict_update_workflow_set_draft';
  }
}

function ict_update_benefits_realised_validate($form, &$form_state) {
  $list = array(
    'field_status',
  );
  $text = array(
    'field_commentary',
    'field_benefit',
  );
  $date = array(
    'field_benefit_start_date',
    'field_end_date',
  );
  foreach ($form_state['values']['field_benefits_realised']['und'] as $benefit_key => $benefit) {
    if (!is_numeric($benefit_key)) continue;
    foreach($list as $field) {
      if (empty($benefit[$field]['und'][0]['value'])) {
        form_set_error('field_benefits_realised][und][ ' . $benefit_key . '][' . $field . '][und][0][value', 'Field <em>' . $form['field_benefits_realised']['und'][$benefit_key][$field]['und']['#title'] . '</em> is required.');
      }
    }
    foreach($text as $field) {
      if (empty($benefit[$field]['und'][0]['value'])) {
        form_set_error('field_benefits_realised][und][ ' . $benefit_key . '][' . $field . '][und][0][value', 'Field <em>' . $form['field_benefits_realised']['und'][$benefit_key][$field]['und'][0]['value']['#title'] . '</em> is required.');
      }
    }
    foreach($date as $field) {
      if (empty($benefit[$field]['und'][0]['value'])) {
        form_set_error('field_benefits_realised][und][ ' . $benefit_key . '][' . $field . '][und][0][value', 'Field <em>' . $form['field_benefits_realised']['und'][$benefit_key][$field]['und'][0]['#title'] . '</em> is required.');
      }
    }
    $start = strtotime($benefit['field_benefit_start_date']['und'][0]['value']);
    $end = strtotime($benefit['field_end_date']['und'][0]['value']);
    if ($end < $start) {
      form_set_error('field_benefits_realised][und][ ' . $benefit_key . '][field_end_date][und][0][value', '<em>End date</em> could not be before <em>Start date</em>.');
    }
  }

}

function ict_update_all_fields_required_validate($form, &$form_state) {
  $text = array(
    'field_forecast_level_of_project_',
    'field_actual_level_of_project_co',
    'field_current_financial_benefits',
    'field_estimated_value_of_benefit',
    'field_entity_comments',
  );
  $term = array(
    'field_project_stage',
  );
  foreach($term as $field) {
    if (empty($form_state['values'][$field]['und'][0]['tid'])) {
      form_set_error($field . '][und][0][value', 'Field <em>' . $form[$field]['und']['#title'] . '</em> is required.');
    }
  }
  foreach($text as $field) {
    if (empty($form_state['values'][$field]['und'][0]['value'])) {
      form_set_error($field . '][und][0][value', 'Field <em>' . $form[$field]['und'][0]['value']['#title'] . '</em> is required.');
    }
  }
  ict_update_benefits_realised_validate($form, $form_state);

  if (empty($form_state['values']['field_expected_completion_date']['date']) && $form_state['values']['field_expected_completion_date']['radio'] != 'na') {
    form_set_error('field_expected_completion_date][date', 'Field <em>' . $form['field_expected_completion_date']['und'][0]['#title'] . '</em> is required.');
  }
}

function ict_update_workflow_set_wait_approve($form, &$form_state) {
  if (!$form_state['node']->nid) {
    return;
  }
  $nid = $form_state['node']->nid;
  if (ict_project_get_workflow_state($nid) != 'waiting_approval') {
    $form_state['node']->revision = TRUE;
    node_save($form_state['node']);
    ict_project_set_workflow_state('waiting_approval', $nid);
  }
}

function ict_update_workflow_set_approve($form, &$form_state) {
  if (!$form_state['node']->nid) {
    return;
  }
  $nid = $form_state['node']->nid;
  if (ict_project_get_workflow_state($nid) != 'approved') {
    $form_state['node']->revision = TRUE;
    node_save($form_state['node']);
    ict_project_set_workflow_state('approved', $nid);
  }
}

function ict_update_workflow_set_draft($form, &$form_state) {
  if (!$form_state['node']->nid) {
    return;
  }
  $nid = $form_state['node']->nid;
  if (ict_project_get_workflow_state($nid) != 'draft') {
    $form_state['node']->revision = TRUE;
    node_save($form_state['node']);
    ict_project_set_workflow_state('draft', $nid);
  }
}

function ict_update_datepicker_value($element, &$form_state, $form) {
  $field_name = $element['und']['#field_name'];
  if ($form_state['values'][$field_name]['radio'] == 'na') {
    $form_state['values'][$field_name]['und'][0]['value'] = '';
  }
}

/**
 * Implements hook_theme().
 */
function ict_update_theme($existing, $type, $theme, $path) {
  return array(
    'ict_update_add_form' => array(
      'template' => 'ict-update-add-form',
      'path' => drupal_get_path('module', 'ict_update') . '/theme',
      'render element' => 'form',
    ),
    'field_benefits_realised_table' => array(
      'template' => 'field-benefits-realised-table',
      'path' => drupal_get_path('module', 'ict_update') . '/theme',
      'render element' => 'element',
    ),
  );
}

function ict_update_creation_allowed($project_id) {
  if (!ict_project_access_update('create', $project_id)) {
    return FALSE;
  }
  $updates = ict_update_project_get_list($project_id);
  if (!empty($updates)) {
    $update = reset($updates);
    $state = ict_project_get_workflow_state($update);
    if ($state == 'approved') {
      return TRUE;
    }
  }
  else {
    $approved_vid = ict_project_get_last_transaction_by_state($project_id, 'approved');
    if ($approved_vid->vid) {
      return TRUE;
    }
  }

  return FALSE;
}

function ict_update_edit_allowed($project_id, $update_id = NULL) {
  if (!$update_id) {
    $updates = ict_update_project_get_list($project_id);
    if (empty($updates)) {
      return FALSE;
    }
    $update_id = reset($updates);
  }
  if (!ict_project_access_update('edit', $project_id, NULL, $update_id)) {
    return FALSE;
  }
  if (!in_array(ict_project_get_workflow_state($update_id), array('draft'))) {
    return FALSE;
  }

  return TRUE;
}

function ict_update_approve_allowed($project_id, $update_id = NULL) {
  if (!$update_id) {
    $updates = ict_update_project_get_list($project_id);
    if (empty($updates)) {
      return FALSE;
    }
    $update_id = reset($updates);
  }
  if (!ict_project_access_update('approve', $project_id, NULL, $update_id)) {
    return FALSE;
  }
  if (!in_array(ict_project_get_workflow_state($update_id), array('waiting_approval'))) {
    return FALSE;
  }

  return TRUE;
}

function ict_update_project_get_list($project_id, $state = NULL) {
  $query = db_select('field_data_field_project', 'p');
  $query->addField('p', 'entity_id');
  $query->condition('field_project_target_id', $project_id);
  $query->orderBy('entity_id', 'DESC');
  $res = $query->execute()->fetchCol();

  return $res;
}
