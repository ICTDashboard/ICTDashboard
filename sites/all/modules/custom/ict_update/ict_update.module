<?php
/**
 * @file
 * Code for the ICT Update feature.
 */

include_once 'ict_update.features.inc';
/**
 * @file
 * Code for the ICT Project feature.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function ict_update_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && in_array($plugin_type, array('content_types', 'access'))) {
    return 'plugins/' . $plugin_type;
  }
}

function ict_update_update_form_recursive($key, $value, $array) {
  $array[$key] = $value;
  foreach(element_children($array) as $k) {
    $array[$k] = ict_update_update_form_recursive($key, $value, $array[$k]);
  }
  return $array;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ict_update_form_update_node_form_alter(&$form, &$form_state, $form_id) {
  $update = $form['#node'];
  if (empty($update->nid)) {
    $project_id = arg(1);
    $project = node_load($project_id);
    $approved_vid = ict_project_get_last_transaction_by_state($project_id, 'approved');
    if (!$approved_vid->vid) {
      drupal_not_found();
    }
    $form['title']['#value'] = $project->title . ' Update submission ' . format_date(REQUEST_TIME, 'medium', 'd/m/Y h:i');
    $form['#project_id'] = $form['field_project'][LANGUAGE_NONE][0]['target_id']['#value'] = $project->title . ' (' . $project_id . ')';
    $form['field_project_revision'][LANGUAGE_NONE][0]['value']['#value'] = $approved_vid->vid;
  }
  else {
    $form['#project_id'] = $project_id = $form['#node']->field_project['und'][0]['target_id'];
    $project = node_load($project_id);
  }
  $form['#project_node'] = $project;

  $form['#theme'] = 'ict_update_add_form';

  $form = ict_update_update_form_recursive('#title_display', 'invisible', $form);

  $form['field_expected_completion_date']['und'][0]['#prefix'] = '<div class="element-hidden">';
  $form['field_expected_completion_date']['und'][0]['#suffix'] = '</div>';
  $form['field_expected_completion_date']['date']['#type'] = 'textfield';
  $form['field_expected_completion_date']['und'][0]['#theme_wrappers'] = array();
  $form['field_expected_completion_date']['date']['#default_value'] = $form['field_expected_completion_date']['und'][0]['#default_value'];
  $form['field_expected_completion_date']['date']['#attributes'] = array(
    'class' => array('add_datepicker'),
    'data-dateFormat' => 'dd/mm/yy',
  );
  $form['field_expected_completion_date']['radio'] = array(
    '#type' => 'radios',
    '#options' => array(
      'time' => '',
      'na' => 'N/A',
    ),
    '#default_value' => 'time',
    '#weight' => -999,
  );
  $form['field_expected_completion_date']['#element_validate'] = array('ict_update_datepicker_value');

  foreach(element_children($form['field_benefits_realised']['und']) as $benefit_key) {
    if (!is_numeric($benefit_key)) continue;
    $form['field_benefits_realised']['und'][$benefit_key]['field_benefit_start_date']['und'][0]['#theme_wrappers'] = array();
    $form['field_benefits_realised']['und'][$benefit_key]['field_end_date']['und'][0]['#theme_wrappers'] = array();
  }

  $form['field_benefits_realised']['und']['#theme'] = 'field_benefits_realised_table';

  $action = arg(2);
  if ($action == 'approve') {
    $form['actions']['submit']['#attributes']['class'] = array('submit-button');
    $form['actions']['submit_approve'] = $form['actions']['submit_decline'] = $form['actions']['submit'];
    unset($form['actions']['submit']);
    $form['actions']['submit_decline']['#value'] = t('Decline');
    $form['actions']['submit_approve']['#value'] = t('Approve');
    $form['actions']['submit_decline']['#submit'][] = 'ict_update_workflow_set_draft';
    $form['actions']['submit_approve']['#submit'][] = 'ict_update_workflow_set_approve';
  }
  else {
    $form['actions']['submit']['#attributes']['class'] = array('submit-button');
    $form['actions']['submit_request'] = $form['actions']['submit'];
    $form['actions']['submit_request']['#value'] = t('Save and request approval');
    $form['actions']['submit_request']['#validate'][] = 'ict_update_all_fields_required_validate';
    $form['actions']['submit_request']['#submit'][] = 'ict_update_workflow_set_wait_approve';
    $form['actions']['submit']['#submit'][] = 'ict_update_workflow_set_draft';
  }
}

function ict_update_benefits_realised_validate($form, &$form_state) {
  $list = array(
    'field_status',
  );
  $text = array(
    'field_commentary',
    'field_benefit',
  );
  $date = array(
    'field_benefit_start_date',
    'field_end_date',
  );
  foreach ($form_state['values']['field_benefits_realised']['und'] as $benefit_key => $benefit) {
    if (!is_numeric($benefit_key)) continue;
    foreach($list as $field) {
      if (empty($benefit[$field]['und'][0]['value'])) {
        form_set_error('field_benefits_realised][und][ ' . $benefit_key . '][' . $field . '][und][0][value', 'Field <em>' . $form['field_benefits_realised']['und'][$benefit_key][$field]['und']['#title'] . '</em> is required.');
      }
    }
    foreach($text as $field) {
      if (empty($benefit[$field]['und'][0]['value'])) {
        form_set_error('field_benefits_realised][und][ ' . $benefit_key . '][' . $field . '][und][0][value', 'Field <em>' . $form['field_benefits_realised']['und'][$benefit_key][$field]['und'][0]['value']['#title'] . '</em> is required.');
      }
    }
    foreach($date as $field) {
      if (empty($benefit[$field]['und'][0]['value'])) {
        form_set_error('field_benefits_realised][und][ ' . $benefit_key . '][' . $field . '][und][0][value', 'Field <em>' . $form['field_benefits_realised']['und'][$benefit_key][$field]['und'][0]['#title'] . '</em> is required.');
      }
    }
    $start = strtotime($benefit['field_benefit_start_date']['und'][0]['value']);
    $end = strtotime($benefit['field_end_date']['und'][0]['value']);
    if ($end < $start) {
      form_set_error('field_benefits_realised][und][ ' . $benefit_key . '][field_end_date][und][0][value', '<em>End date</em> could not be before <em>Start date</em>.');
    }
  }

}

function ict_update_all_fields_required_validate($form, &$form_state) {
  $text = array(
    'field_forecast_level_of_project_',
    'field_actual_level_of_project_co',
    'field_current_financial_benefits',
    'field_estimated_value_of_benefit',
    'field_entity_comments',
  );
  $term = array(
    'field_project_stage',
  );
  foreach($term as $field) {
    if (empty($form_state['values'][$field]['und'][0]['tid'])) {
      form_set_error($field . '][und][0][value', 'Field <em>' . $form[$field]['und']['#title'] . '</em> is required.');
    }
  }
  foreach($text as $field) {
    if (empty($form_state['values'][$field]['und'][0]['value'])) {
      form_set_error($field . '][und][0][value', 'Field <em>' . $form[$field]['und'][0]['value']['#title'] . '</em> is required.');
    }
  }
  ict_update_benefits_realised_validate($form, $form_state);

  if (empty($form_state['values']['field_expected_completion_date']['date']) && $form_state['values']['field_expected_completion_date']['radio'] != 'na') {
    form_set_error('field_expected_completion_date][date', 'Field <em>' . $form['field_expected_completion_date']['und'][0]['#title'] . '</em> is required.');
  }
}

function ict_update_workflow_set_wait_approve($form, &$form_state) {
  if (!$form_state['node']->nid) {
    return;
  }
  $nid = $form_state['node']->nid;
  if (ict_project_get_workflow_state($nid) != 'waiting_approval') {
    $form_state['node']->revision = TRUE;
    node_save($form_state['node']);
    ict_project_set_workflow_state('waiting_approval', $nid);
  }
}

function ict_update_workflow_set_approve($form, &$form_state) {
  if (!$form_state['node']->nid) {
    return;
  }
  $nid = $form_state['node']->nid;
  if (ict_project_get_workflow_state($nid) != 'approved') {
    $form_state['node']->revision = TRUE;
    node_save($form_state['node']);
    ict_project_set_workflow_state('approved', $nid);
  }
  $form_state['redirect'] = url('node/'. $form['#project_id']);
}

function ict_update_workflow_set_draft($form, &$form_state) {
  if (!$form_state['node']->nid) {
    return;
  }
  $nid = $form_state['node']->nid;
  if (ict_project_get_workflow_state($nid) != 'draft') {
    $form_state['node']->revision = TRUE;
    node_save($form_state['node']);
    ict_project_set_workflow_state('draft', $nid);
  }
  $form_state['redirect'] = url('node/'. $form['#project_id']);
}

function ict_update_datepicker_value($element, &$form_state, $form) {
  $field_name = $element['und']['#field_name'];
  if ($form_state['values'][$field_name]['radio'] == 'na') {
    $form_state['values'][$field_name]['und'][0]['value'] = '';
  }
}

/**
 * Implements hook_theme().
 */
function ict_update_theme($existing, $type, $theme, $path) {
  return array(
    'ict_update_add_form' => array(
      'template' => 'ict-update-add-form',
      'path' => drupal_get_path('module', 'ict_update') . '/theme',
      'render element' => 'form',
    ),
    'field_benefits_realised_table' => array(
      'template' => 'field-benefits-realised-table',
      'path' => drupal_get_path('module', 'ict_update') . '/theme',
      'render element' => 'element',
    ),
  );
}

function ict_update_creation_allowed($project_id) {
  if (!ict_project_access_update('create', $project_id)) {
    return FALSE;
  }
  $updates = ict_update_project_get_list($project_id);
  $project_state = ict_project_get_workflow_state($project_id);
  if ($project_state != 'approved') {
    return FALSE;
  }
  if (!empty($updates)) {
    $update = reset($updates);
    $state = ict_project_get_workflow_state($update);
    if ($state == 'approved') {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }

  return TRUE;
}

function ict_update_edit_allowed($project_id, $update_id = NULL) {
  if (!$update_id) {
    $updates = ict_update_project_get_list($project_id);
    if (empty($updates)) {
      return FALSE;
    }
    $update_id = reset($updates);
  }
  if (!ict_project_access_update('edit', $project_id, NULL, $update_id)) {
    return FALSE;
  }
  if (!in_array(ict_project_get_workflow_state($update_id), array('draft'))) {
    return FALSE;
  }

  return TRUE;
}

function ict_update_approve_allowed($project_id, $update_id = NULL) {
  if (!$update_id) {
    $updates = ict_update_project_get_list($project_id);
    if (empty($updates)) {
      return FALSE;
    }
    $update_id = reset($updates);
  }
  if (!ict_project_access_update('approve', $project_id, NULL, $update_id)) {
    return FALSE;
  }
  if (!in_array(ict_project_get_workflow_state($update_id), array('waiting_approval'))) {
    return FALSE;
  }

  return TRUE;
}

function ict_update_project_get_list($project_id, $state = NULL) {
  $query = db_select('field_data_field_project', 'p');
  $query->addField('p', 'entity_id');
  $query->condition('field_project_target_id', $project_id);
  if ($state) {
    $query->join('project_workflow', 'w', "w.state = '" . $state . "' AND w.nid = p.entity_id");
  }
  $query->orderBy('entity_id', 'DESC');

  $res = $query->execute()->fetchCol();

  return $res;
}

function ict_update_get_revisions_list($project_id, $state = NULL) {
  $query = db_select('project_workflow', 'w');
  $query->addField('w', 'vid');
  $query->condition('nid', $project_id);
  if ($state) {
    $query->condition('state', $state);
  }
  $query->orderBy('vid', 'DESC');

  $res = $query->execute()->fetchCol();

  return $res;
}

function ict_update_approve_form($form, &$form_state, $nid, $update_id) {
  $form['#theme'] = 'ict_project_baseline_approve_form';

  $form['#nid'] = $nid;
  $form['#update_id'] = $update_id;

  $form['approve'] = array(
    '#type' => 'submit',
    '#value' => t('Approve Update'),
    '#attributes' => array('class' => array('submit-button')),
    '#submit' => array('ict_update_review_workflow_set_approve'),
    '#validate' => array('ict_update_baseline_approve_form_validate')
  );

  $form['decline'] = array(
    '#type' => 'submit',
    '#value' => t('Decline Update'),
    '#attributes' => array('class' => array('submit-button')),
    '#submit' => array('ict_update_review_workflow_set_draft'),
    '#validate' => array('ict_update_baseline_approve_form_validate')
  );

  return $form;
}

/**
 * Validate Vaseline approval
 *
 * @param $form
 * @param $form_state
 */
function ict_update_baseline_approve_form_validate ($form, &$form_state) {
  // make sure that other approver hasn't approved the project
  $nid = $form['#nid'];
  if (!ict_update_approve_allowed($nid)) {
    form_set_error('nid', t('Sorry but the Update Data cannot be approved. Make sure that you have correct access rights and that it has not been approved or declined by another Data Approver'));
  }
}

function ict_update_review_workflow_set_approve($form, &$form_state) {
  if (!$form['#update_id']) {
    return;
  }
  $nid = $form['#update_id'];
  $node = node_load($nid);
  if (ict_project_get_workflow_state($nid) != 'approved') {
    $node->revision = TRUE;
    node_save($node);
    ict_project_set_workflow_state('approved', $nid);
  }
}

function ict_update_review_workflow_set_draft($form, &$form_state) {
  if (!$form['#update_id']) {
    return;
  }
  $nid = $form['#update_id'];
  $node = node_load($nid);
  if (ict_project_get_workflow_state($nid) != 'draft') {
    $node->revision = TRUE;
    node_save($node);
    ict_project_set_workflow_state('draft', $nid);
  }
}

function template_preprocess_field_benefits_realised_table(&$vars) {
  $settings = &drupal_static('drupal_add_js', array());
  foreach($settings['settings']['data'] as &$setting) {
    if (isset($setting['datePopup'])) {
      foreach($setting['datePopup'] as &$field) {
        $field['settings']['buttonImage'] = "/sites/all/themes/itdash/html/images/calendar-icon.png";
        $field['settings']['buttonImageOnly'] = TRUE;
        $field['settings']['showOn'] = 'button';
        $field['settings']['changeYear'] = FALSE;
        $field['settings']['changeMonth'] = FALSE;
      }
    }
  }

  $vars['element']['add_more']['#attributes']['class'][] = 'export-btn';

  $project_id = arg(1);
  $project_history = ict_update_get_allowed_entity_list($project_id);
  $benefits = array();
  foreach($project_history as $project_vid => $updates) {
    $project = node_load($project_id, $project_vid);
    $project_wrapper = entity_metadata_wrapper('node', $project);
    if (isset($project_wrapper->field_benefits_realised)) {
      $benefits[] = $project_wrapper->field_benefits_realised->value();
    }
    foreach($updates as $update_id) {
      $update_wrapper = entity_metadata_wrapper('node', $update_id);
      if (isset($update_wrapper->field_benefits_realised)) {
        $benefits[] = $update_wrapper->field_benefits_realised->value();
      }
    }
  }

  return $benefits;
}

function ict_update_get_allowed_entity_list($project_id, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $project_vids = array();

  $allowed_states = ict_project_allowed_view_states($project_id, $account);

  $project_state = ict_project_get_workflow_state($project_id);
  if (in_array($project_state, $allowed_states)) {
    // Get latest revision for project
    $query = db_select('project_workflow', 'w');
    $query->addField('w', 'vid');
    $query->condition('nid', $project_id);
    $query->orderBy('created', 'DESC');
    $res = $query->execute()->fetchCol();

    $project_vids[] = reset($res);
  }
  // Get all approved project revisions
  $project_revisions = ict_update_get_revisions_list($project_id, 'approved');
  $project_vids = array_merge($project_vids, $project_revisions);

  // Get all updates by revisions
  $query = db_select('field_data_field_project', 'p');
  $query->addField('p', 'entity_id', 'update_nid');
  $query->addField('pr', 'field_project_revision_value', 'project_vid');
  $query->condition('field_project_target_id', $project_id);
  $query->join('field_data_field_project_revision', 'pr', 'pr.entity_id = p.entity_id');
  $query->orderBy('p.entity_id', 'ASC');
  $updates_res = $query->execute()->fetchAllAssoc('update_nid');

  $ids_list = array();
  array_map(function($val)  use (&$ids_list){ $ids_list[$val] = array(); }, $project_vids);

  foreach($ids_list as $vid => $val) {
    $ids_list[$vid] = array_filter($updates_res, function($el) use ($vid){ return $el->project_vid == $vid ? TRUE : FALSE; });
    $ids_list[$vid] = array_keys($ids_list[$vid]);
  }
  ksort($ids_list);

  return $ids_list;
}
